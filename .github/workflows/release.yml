name: release
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  APPLICATION_NAME: handyview

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-appname
      id: get_appname
      run: echo ::set-output name=APPNAME::${APPLICATION_NAME}
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  windows:
    needs: [setup]
    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow scipy imagehash pyqt5
        pip install pyinstaller
    - name: build
      run: |
        pyinstaller -D handyview/handyviewer.py -i icon.ico --add-data="handyview;handyview" --add-data="icons;icons" --add-data="icon.png;." --add-data="icon.ico;." --windowed --noconfirm --hidden-import="PIL.Image" --hidden-import="PIL.ImageDraw" --hidden-import="PyQt5.QtMultimedia" --hidden-import="PyQt5.QtMultimediaWidgets" --hidden-import="imagehash"
    - name: package
      run: |
        cd dist
        dir handyviewer
        7z a -r ${{ env.PACKAGENAME }}.zip handyviewer
        move ${{ env.PACKAGENAME }}.zip ..
        cd ..
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    needs: [setup]
    runs-on: macos-11
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-macos
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow imagehash pyqt5
        pip install pyinstaller
    - name: build
      run: |
        sh pyinstaller_install_mac.sh
    - name: create dmg
      run: |
        brew install create-dmg
        sh create_dmg.sh
        mv dist/handyviewer.dmg ${{ env.PACKAGENAME }}.dmg
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.dmg



  release:
    needs: [setup, windows, macos]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: upload-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.dmg
        asset_name: ${{ env.PACKAGENAME }}.dmg
        asset_content_type: application/octet-stream
